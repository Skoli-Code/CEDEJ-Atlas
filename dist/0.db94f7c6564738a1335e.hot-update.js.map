{"version":3,"file":"0.db94f7c6564738a1335e.hot-update.js","sources":["webpack:///src/components/molecules/TemperaturesLegend/index.js?5139"],"sourcesContent":["import React from 'react'; \nimport styled from 'styled-components';\nimport createFragment from 'react-addons-create-fragment';\n\nimport {\n  LegendCategoryName,\n  Reduced,\n  Td,\n  Th,\n  TrName,\n  TrNameContent,\n  TemperatureLegendPattern,\n} from 'components';\n\nimport { visibleTypes } from 'utils';\n\nimport * as patternUtils from 'utils/patterns';\nimport * as aridityUtils from 'utils/aridity';\n\nimport { findByValue as findTemperature } from 'utils/temperatures';\n\n\nconst SummerName = styled(Reduced)`\n  padding-left: 7px;\n`;\n\nconst VeryHotSummer = () => (\n  <SummerName>été très chaud (plus de 30°)</SummerName>\n);\n\nconst HotSummer = () => (<SummerName>été chaud (20 à 30°)</SummerName>);\nconst TemperedSummer = () => (<SummerName>été tempéré (10 à 20°)</SummerName>);\nconst WinterName = ({ children }) => (\n  <tr>\n    <Th align={'left'}>\n      <LegendCategoryName><Reduced>{ children }</Reduced></LegendCategoryName>\n    </Th>\n  </tr>\n);\nWinterName.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.node,\n    PropTypes.arrayOf(PropTypes.node),\n  ]),\n};\n\nconst TemperatureRow = ({\n  name,\n  temperature,\n  patterns,\n  aridity,\n  layers: {\n    aridity: {visible: showAridity},\n  },\n}) => {\n  const temp = findTemperature(temperature);\n  const visibleAridities = showAridity ? visibleTypes(aridity) : [];\n  return (\n    <tr>\n      <Td align={'left'}>{ name }</Td>\n      {\n        visibleAridities.map((ar,key) => (\n          <TemperatureLegendPattern\n            key={key}\n            patterns={ patterns } aridity={ ar }\n            temperature={ temp }/>\n        ))\n      }\n      {\n        (visibleAridities.length === 0) && (\n          <TemperatureLegendPattern temperature={ temp }/>\n        )\n      }\n    </tr>\n  );\n};\n\nconst ATh = styled(Td)`\n  font-size: 0.65rem;\n  line-height: 0.7rem;\n  .legend--print & {\n    width: 60px;\n    font-weight: bold;\n  }\n`;\n\nconst AridityName = ({ aridity }) => (\n  <ATh\n    width={40}\n    data-tip \n    data-for={`tooltip-aridity-${aridity.name}`}>\n    { aridityUtils.getName(aridity) }\n  </ATh>\n);\n\nconst ATd = styled(Td)`\n  font-size: 0.6rem;\n  line-height: 0.6rem;\n`;\n\nconst AridityPrecipitations = ({ aridity }) => (\n  <ATd>\n    P/Etp<br/>{ aridityUtils.getPrecipitations(aridity) }\n  </ATd>\n);\n\nconst AridityNames = ({ aridity, print }) => {\n  const visibleAridities = visibleTypes(aridity);\n  if(!visibleAridities.length){ return null; }\n  return [\n    <tr>\n      <TrName><TrNameContent>Aridité</TrNameContent></TrName>\n      { visibleAridities.map((aridity, key) => (\n        <AridityName aridity={aridity} key={key} />\n      ))}\n    </tr>,\n    print ? (\n      <tr>\n        <td></td>\n        { visibleAridities.map((aridity, key) => (\n          <AridityPrecipitations key={key} aridity={aridity} />\n        ))}\n      </tr>\n    ) : null\n  ];\n};\n\nconst TemperaturesRows = ({\n  temperatures: {\n    summer,\n    winter,\n  },\n  aridity,\n  patterns,\n  layers,\n})=>(\n  [\n    (<tr key={'h-h'}>\n      <TrName><TrNameContent>Températures</TrNameContent></TrName>\n    </tr>\n    ),\n    winter.A.visible && ([\n      (<WinterName key={'h-0'}>Hiver chaud (20 à 30°C)</WinterName>),\n      summer.A.visible ? (\n        <TemperatureRow layers={layers}\n          name={(<VeryHotSummer />)}\n          key={0}\n          temperature={1}\n          patterns={patterns}\n          aridity={aridity}\n        />\n      ) : null,\n      summer.B.visible ? (\n        <TemperatureRow layers={layers} \n          key={1}\n          name={(<HotSummer />)}\n          aridity={aridity}\n          temperature={2}\n          patterns={patterns}\n        />\n      ) : null,\n    ]),\n    winter.B.visible && ([\n      (<WinterName key={'h-1'}>Hiver tempéré (10 à 20°)</WinterName>),\n      summer.A.visible ? (\n        <TemperatureRow layers={layers}\n          key={2}\n          name={(<VeryHotSummer />)}\n          temperature={3}\n          patterns={patterns}\n          aridity={aridity}\n        />\n      ) : null,                                 \n      summer.B.visible ? (\n        <TemperatureRow layers={layers}\n          key={3}\n          name={(<HotSummer />)}\n          temperature={4}\n          patterns={patterns}\n          aridity={aridity}\n        />\n      ) : null,\n      summer.C.visible ? (\n        <TemperatureRow layers={layers}\n          key={4}\n          name={(<TemperedSummer />)}\n          temperature={5}\n          patterns={patterns}\n          aridity={aridity}\n        />\n      ) : null,\n    ]),\n    winter.C.visible && ([\n      (<WinterName key={'h-2'}>Hiver frais (0 à 10°)</WinterName>),\n      summer.A.visible ? (\n        <TemperatureRow layers={layers}\n          key={5}\n          name={(<VeryHotSummer />)}\n          temperature={6}\n          patterns={patterns}\n          aridity={aridity}\n        />\n      ) : null,\n      summer.B.visible ? (\n        <TemperatureRow layers={layers}\n          key={6}  \n          name={(<HotSummer />)}\n          temperature={7}\n          patterns={patterns}\n          aridity={aridity}\n        />\n      ) : null,\n      summer.C.visible ? (\n        <TemperatureRow layers={layers}\n          key={7}\n          name={(<TemperedSummer />)}\n          temperature={8}\n          patterns={patterns}\n          aridity={aridity}\n        />\n      ) : null,\n    ]),\n    winter.D.visible && ([\n      (<WinterName key={'h-3'}>Hiver froid (moins de 0°)</WinterName>),\n      summer.A.visible ? (\n        <TemperatureRow layers={layers}\n          key={8}\n          name={(<VeryHotSummer />)}\n          temperature={9}\n          patterns={patterns}\n          aridity={aridity}\n        />\n      ) : null,\n      summer.B.visible ? (\n        <TemperatureRow layers={layers}\n          key={9}\n          name={(<HotSummer />)}\n          temperature={10}\n          patterns={patterns}\n          aridity={aridity}\n        />\n      ) : null,\n      summer.C.visible ? (\n        <TemperatureRow layers={layers}\n        key={10}\n        name={(<TemperedSummer />)}\n        temperature={11}\n        patterns={patterns}\n        aridity={aridity} />\n      ) : null,\n    ]),\n  ]\n);\nconst Temperatures = ({\n  print,\n  filters: {\n    temperatures:{ summer, winter },\n    aridity,\n  },\n  layers: {\n    temperatures: { visible:showTemperatures },\n    aridity: { visible:showAridity },\n  }\n}) => {\n  const layers = {\n    temperatures:{ visible:showTemperatures },\n    aridity: { visible: showAridity },\n  };\n  const hasVisibleAridity = showAridity && visibleTypes(aridity).length > 0;\n  const hasVisibleTemperatures = showTemperatures && (\n    visibleTypes(winter).length > 0 && visibleTypes(summer).length > 0\n  );\n \n  const patterns = patternUtils.initPatterns();\n  const temperatureRows = hasVisibleTemperatures ? TemperaturesRows(\n    {\n      temperatures:{summer,winter},\n      aridity,\n      patterns,\n      layers,\n    }\n  ): null;\n  const tempsRowsFragment = createFragment({temperatures:temperatureRows});\n  \n  const aridityNamesRows = hasVisibleAridity ? AridityNames({\n    aridity,\n    print,\n  }) : null;\n  const aridityNamesFragment = createFragment({aridity:aridityNamesRows});\n  return (\n    <tbody>\n    {[\n      aridityNamesFragment,\n      tempsRowsFragment,\n      !hasVisibleTemperatures && hasVisibleAridity? (\n        <TemperatureRow layers={layers}\n          key={'aridity-row'}\n          aridity={aridity}\n          patterns={patterns}/>\n      ): null,\n    ]}\n    </tbody>\n  );\n};\n\n\nexport default Temperatures; \n\n\n\n// WEBPACK FOOTER //\n// src/components/molecules/TemperaturesLegend/index.js"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;AACA;AACA;AASA;AACA;AACA;AACA;AADA;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;;;;;;;AAEA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AADA;AAOA;AACA;AADA;AACA;AAMA;AAQA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAJA;AAQA;AAXA;AAizHA;AA8HA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AAKA;AACA;AACA;AARA;AAaA;AACA;AAEA;;;;;;;;;AA5RA;AACA;AAGA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AAaA;AACA;AA8BA;AACA;AAQA;AACA;AAQA;AACA;AAIA;AACA;AAKA;AACA;AAoBA;AACA;AA6HA;AACA;;;;;;;;A","sourceRoot":""}