{"version":3,"file":"0.551b1ed30f74ce891c70.hot-update.js","sources":["webpack:///src/components/organisms/TemperaturesFilters/index.js?0148"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport { font, palette } from 'styled-theme';\nimport { fromFilters } from 'store/selectors';\nimport { toggleTemperatureVisibility } from 'store/actions';\nimport { Heading, ToggleFilter } from 'components';\nimport { visibleTypes } from 'utils';\n\nconst ERRORS = {\n  noSummerSelected: 'NO_SUMMER',\n  noWinterSelected: 'NO_WINTER',\n};\n\nconst noWinterSelected = (err) => err === ERRORS.noWinterSelected;\nconst noSummerSelected = (err) => err === ERRORS.noSummerSelected;\n\nconst temperatureError = (winterTypes, summerTypes) => {\n  const visibleWinters = visibleTypes(winterTypes);\n  const visibleSummers = visibleTypes(summerTypes);\n  if ((visibleWinters.length > 0) && (visibleSummers.length === 0)) {\n    return ERRORS.noSummerSelected;\n  }\n\n  if ((visibleSummers.length > 0) && (visibleWinters.length === 0)) {\n    return ERRORS.noWinterSelected;\n  }\n};\n\nconst ErrorMessage = styled.div`\n  font-family: ${font('primary')};\n  font-size: 0.8rem;\n  opacity: ${({ visible }) => visible ? 1 : 0};\n  line-height: ${({ visible }) => visible ? '1em' : 0};\n  transition: opacity .2s ease, line-height .33s ease;\n  color: ${palette('primary', 0)};\n`;\n\nconst TemperaturesFilters = ({\n  error,\n  winterTypes: wTypes,\n  summerTypes: sTypes,\n  toggleWinterType,\n  toggleSummerType,\n}, { layer }) => ( \n  <div>\n    <Heading\n      style={{ marginBottom: 0 }}\n      level={6}\n    >\n      Type(s) d&#39;hiver\n    </Heading>\n     \n    <ErrorMessage visible={noWinterSelected(error)}>\n      <span>Vous devez sélectionner au moins un type d&#39;hiver</span>\n    </ErrorMessage>\n    <ToggleFilter\n      layer={layer}\n      toggled={wTypes.A.visible}\n      onToggle={toggleWinterType(wTypes.A)}\n      label={'Hiver chaud (20 à 30°C)'}\n    />\n\n    <ToggleFilter\n      layer={layer}\n      toggled={wTypes.B.visible}\n      onToggle={toggleWinterType(wTypes.B)}\n      label={'Hiver tempéré (10 à 20°C)'}\n    />\n    \n    <ToggleFilter\n      layer={layer}\n      toggled={wTypes.C.visible}\n      onToggle={toggleWinterType(wTypes.C)}\n      label={'Hiver frais (0 à 10°C)'}\n    />\n\n    <ToggleFilter\n      layer={layer}\n      toggled={wTypes.D.visible}\n      onToggle={toggleWinterType(wTypes.D)}\n      label={'Hiver froid (moins de 0°C)'}\n    />\n \n    <Heading\n      style={{ marginBottom: 0 }}\n      level={6}\n    >\n      Type(s) d&#39;été\n    </Heading>\n    <ErrorMessage visible={noSummerSelected(error)}>\n      <span>Vous devez sélectionner au moins un type d&#39;été</span>\n    </ErrorMessage>\n\n    <ToggleFilter\n      layer={layer}\n      toggled={sTypes.A.visible}\n      onToggle={toggleSummerType(sTypes.A)}\n      label={'Été très chaud (plus de 30°C)'}\n    />\n\n    <ToggleFilter\n      layer={layer}\n      toggled={sTypes.B.visible}\n      onToggle={toggleSummerType(sTypes.B)}\n      label={'Été chaud (20 à 30°C)'}\n    />\n    \n    <ToggleFilter\n      layer={layer}\n      toggled={sTypes.C.visible}\n      onToggle={toggleSummerType(sTypes.C)}\n      label={'Été tempéré (10 à 20°C)'}\n    />\n  </div>\n);\n\nTemperaturesFilters.propTypes = {\n  error: PropTypes.string,\n  winterTypes: PropTypes.object,\n  summerTypes: PropTypes.object,\n  toggleWinterType: PropTypes.func,\n  toggleSummerType: PropTypes.func,\n};\n\nTemperaturesFilters.contextTypes = {\n  layer: PropTypes.object,\n};\n\nconst mapStateToProps = state => ({\n  error: temperatureError(\n    fromFilters.winterTemperatures(state),\n    fromFilters.summerTemperatures(state)\n  ),\n  winterTypes: fromFilters.winterTemperatures(state),\n  summerTypes: fromFilters.summerTemperatures(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  toggleWinterType: (type) => () => (\n    dispatch(toggleTemperatureVisibility('winter', type))\n  ),\n  toggleSummerType: (type) => () => (\n    dispatch(toggleTemperatureVisibility('summer', type))\n  ),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TemperaturesFilters);\n\n\n\n// WEBPACK FOOTER //\n// src/components/organisms/TemperaturesFilters/index.js"],"mappings":";;;;;;;;;;;;;;AAAA;AACA;;;AAAA;AACA;;;AAAA;AACA;AAAA;AACA;;;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;;;;;AACA;AACA;AACA;AAFA;AACA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAJA;AA/DA;AAPA;AACA;AA8EA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AADA;AACA;AAGA;AAAA;AACA;AAIA;AACA;AANA;AAAA;AACA;AAQA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AACA;AAQA;AACA;;;;;;;;;AA3IA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AAWA;AACA;AAQA;AACA;AA0FA;AACA;AAQA;AACA;;;;;;;;A","sourceRoot":""}