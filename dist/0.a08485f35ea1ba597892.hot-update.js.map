{"version":3,"file":"0.a08485f35ea1ba597892.hot-update.js","sources":["webpack:///src/components/organisms/AridityTemperaturesLayer/delegate.js?a320"],"sourcesContent":["import { CanvasDelegate } from 'components';\nimport * as patternsUtil from 'utils/patterns';\nimport * as boundaries from 'utils/boundaries';\nimport { areaColor } from './styles';\n\nclass Delegate extends CanvasDelegate {\n  constructor(data) {\n    super(data);\n    this.shouldUseMask = false;\n    this.visibility = {\n      aridity: true,\n      temperatures: true,\n    };\n  }\n\n  updateAridityVisibility(visibility) {\n    this.visibility.aridity = visibility;\n  }\n\n  updateTemperaturesVisibility(visibility) {\n    this.visibility.temperatures = visibility;\n  }\n\n  enableMask() {\n    this.shouldUseMask = true;\n  }\n\n  disableMask() {\n    this.shouldUseMask = false;\n  }\n\n  createMask(modelCanvas, temperatures, aridity) {\n    let canvas;\n    if (this.shouldUseMask) {\n      canvas = this.createCanvas(modelCanvas);\n      const aridityCanvas = this.createCanvas(modelCanvas);\n      const temperaturesCanvas = this.createCanvas(modelCanvas);\n      this.drawAreas({\n        context: aridityCanvas.getContext('2d'),\n        features: aridity,\n        fillStyle: 'black',\n        strokeWidth: 2,\n      });\n      \n      this.drawAreas({\n        context: temperaturesCanvas.getContext('2d'),\n        features: temperatures,\n        fillStyle: 'black',\n        strokeWidth: 1,\n      });\n      \n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(aridityCanvas, 0, 0, canvas.width, canvas.height);\n      ctx.globalCompositeOperation = 'xor';\n      ctx.drawImage(temperaturesCanvas, 0, 0, canvas.width, canvas.height);\n      ctx.clip();\n    }\n    return canvas;\n  }\n\n  draw({ canvas, coords, size, layer }) {\n    const { aridity, temperatures } = this.getTileFeatures(coords);\n    const {\n      aridity:isAridityVisible,\n      temperatures:isTemperaturesVisible,\n    } = this.visibility;\n\n    const mask = this.createMask(canvas, temperatures, aridity);\n    const context = canvas.getContext(\"2d\");\n    \n    const patterns = this.patterns = (\n      this.patterns || patternsUtil.initPatterns(context)\n    );\n   \n    context.clearRect(0, 0, canvas.width, canvas.height);\n    context.globalCompositeOperation = 'source-over';\n    \n    try { \n      if (isTemperaturesVisible) {\n        this.drawAreas({\n          context,\n          features: temperatures,\n          fillStyle: (feature)=>areaColor(feature.tags.Temperatur), \n          strokeStyle: (feature)=>areaColor(feature.tags.Temperatur), \n          strokeWidth: 1,\n        });\n      }\n\n      if (isAridityVisible) {\n        this.drawAreas({\n          context,\n          features: aridity,\n          fillStyle: (feature) => {\n            return patterns.findByKey(feature.tags.d_TYPE).canvasPattern\n          },\n          stopCondition: (feature) => {\n            const pattern = patterns.findByKey(feature.tags.d_TYPE);\n            if(!pattern){ return true; }\n            if(!pattern.stripes){ return true; }\n            return false;\n          },\n          strokeWidth: 0,\n        });\n\n        boundaries.addBoundaries({\n          context,\n          patterns,\n          drawPath: this.drawPath,\n          boundaries: aridity,\n          layer:this.layer,\n        });\n\n      }\n\n      if (mask) {\n        context.globalCompositeOperation = 'destination-out';\n        context.drawImage(mask, 0, 0, mask.width, mask.height);\n      }\n\n      context.clip();\n    } catch(e) {\n      console.error('error while drawing', e);\n      throw e;\n    }\n\n    return canvas;\n  }\n}\n\nexport default Delegate;\n\n\n\n// WEBPACK FOOTER //\n// src/components/organisms/AridityTemperaturesLayer/delegate.js"],"mappings":";;;;;;;;;;;;;;AAAA;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;;;;;;;;;AACA;;;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAFA;AAHA;AAOA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAZA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAGA;;;;;;;;;AA5HA;AACA;;;;;;;;A","sourceRoot":""}